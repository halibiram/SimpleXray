name: "Build"

on:
  workflow_dispatch:
    inputs:
      skip_tests:
        description: "Skip unit tests"
        required: false
        default: false
        type: boolean
  release:
    types:
      - published

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Explicit Submodule Update
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      - name: Set up Android SDK
        id: setup_sdk
        uses: android-actions/setup-android@v3

      - name: Read Versions
        run: |
          echo "XRAY_VERSION=$(grep 'XRAY_CORE_VERSION' version.properties | cut -d '=' -f 2)" >> $GITHUB_ENV
          echo "GEOIP_VERSION=$(grep 'GEOIP_VERSION' version.properties | cut -d '=' -f 2)" >> $GITHUB_ENV
          echo "GEOSITE_VERSION=$(grep 'GEOSITE_VERSION' version.properties | cut -d '=' -f 2)" >> $GITHUB_ENV
          echo "GO_VERSION=$(grep 'GO_VERSION' version.properties | cut -d '=' -f 2)" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Setup Keystore and Properties
        run: |
          echo "${{ secrets.SIGNING_KEYSTORE }}" > keystore.b64
          base64 -d keystore.b64 > ./store.jks
          rm keystore.b64
          echo "storeFile=store.jks" > ./store.properties
          echo "storePassword=${{ secrets.SIGNING_STORE_PASSWORD }}" >> ./store.properties
          echo "keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}" >> ./store.properties
          echo "keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}" >> ./store.properties

      - name: Download Rules Files
        run: |
          wget https://github.com/lhear/v2ray-rules-dat/releases/download/${{ env.GEOIP_VERSION }}/geoip.dat -O ./app/src/main/assets/geoip.dat
          wget https://github.com/lhear/v2ray-rules-dat/releases/download/${{ env.GEOSITE_VERSION }}/geosite.dat -O ./app/src/main/assets/geosite.dat

      - name: Build Xray-core from Source
        run: |
          # Set up NDK
          wget -qO android-ndk.zip https://dl.google.com/android/repository/android-ndk-r28c-linux.zip
          unzip -q android-ndk.zip
          rm android-ndk.zip
          NDK_HOME=$(realpath android-ndk-*)

          # Clone Xray-core source and checkout tag
          git clone https://github.com/XTLS/Xray-core.git
          cd Xray-core
          git checkout ${{ env.XRAY_VERSION }}
          COMMID=$(git rev-parse HEAD | cut -c 1-7)

          # Set common environment variables
          export GOOS=android
          export CGO_ENABLED=1

          # Build for arm64-v8a
          echo "Building for arm64-v8a..."
          export GOARCH=arm64
          export CC=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang
          go build -o xray -trimpath -buildvcs=false -ldflags="-X github.com/xtls/xray-core/core.build=${COMMID} -s -w -buildid=" -v ./main
          mkdir -p ../app/src/main/jniLibs/arm64-v8a
          mv xray ../app/src/main/jniLibs/arm64-v8a/libxray.so

          # Build for x86_64
          echo "Building for x86_64..."
          export GOARCH=amd64
          export CC=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android24-clang
          go build -o xray -trimpath -buildvcs=false -ldflags="-X github.com/xtls/xray-core/core.build=${COMMID} -s -w -buildid=" -v ./main
          mkdir -p ../app/src/main/jniLibs/x86_64
          mv xray ../app/src/main/jniLibs/x86_64/libxray.so

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Unit Tests
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_tests
        run: ./gradlew test

      - name: Upload Test Reports
        if: always() && (github.event_name != 'workflow_dispatch' || !inputs.skip_tests)
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: app/build/reports/tests/
          retention-days: 7

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Find and Copy APKs
        run: |
          mkdir -p apks
          find app/build/outputs/apk/release -name "*.apk" -exec cp {} apks/ \;

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: simplexray-apks
          path: apks/
          if-no-files-found: error
          retention-days: 1

      - name: Get APK Info
        id: apk_info
        run: |
          APK_PATH=$(find apks/ -name "*.apk" -type f | head -n 1)
          APK_NAME=$(basename "$APK_PATH")
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
          echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
          echo "commit_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Validate APK File
        if: success() && github.event_name == 'release'
        run: |
          APK_PATH="${{ steps.apk_info.outputs.apk_path }}"
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK dosyası bulunamadı: $APK_PATH"
            ls -lah apks/ || echo "apks/ klasörü bulunamadı"
            exit 1
          fi
          echo "✅ APK dosyası bulundu: $APK_PATH"
          ls -lh "$APK_PATH"

      - name: Send Telegram Text Message
        if: success() && github.event_name == 'release'
        run: |
          BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"

          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "❌ Telegram secrets tanımlanmamış"
            exit 0
          fi

          echo "📤 Telegram'a metin mesajı gönderiliyor..."

          TEXT="✅ *SimpleXray Build Successful*\n\n📦 *APK:* \`${{ steps.apk_info.outputs.apk_name }}\`\n📊 *Size:* ${{ steps.apk_info.outputs.apk_size }}\n🔨 *Commit:* \`${{ steps.apk_info.outputs.commit_sha }}\`\n🌿 *Branch:* ${{ steps.apk_info.outputs.branch }}\n👤 *Actor:* ${{ github.actor }}\n⏰ *Time:* $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n\n🔗 [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"

          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"$CHAT_ID\", \"text\": \"$TEXT\", \"parse_mode\": \"Markdown\"}" \
            "https://api.telegram.org/bot$BOT_TOKEN/sendMessage")

          echo "Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "✅ Metin mesajı başarıyla gönderildi"
          else
            echo "❌ Metin mesajı gönderilemedi"
            echo "Response Details: $RESPONSE"
          fi

      - name: Send APK File to Telegram
        if: success() && github.event_name == 'release'
        run: |
          APK_PATH="${{ steps.apk_info.outputs.apk_path }}"
          BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"

          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "❌ Telegram secrets tanımlanmamış"
            exit 0
          fi

          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK dosyası bulunamadı: $APK_PATH"
            ls -lah apks/ || echo "apks/ klasörü bulunamadı"
            exit 1
          fi

          echo "📎 APK dosyası Telegram'a gönderiliyor..."
          echo "Dosya: $APK_PATH"
          echo "Boyut: $(du -h "$APK_PATH" | cut -f1)"

          RESPONSE=$(curl -s -X POST \
            -F "chat_id=$CHAT_ID" \
            -F "document=@$APK_PATH" \
            "https://api.telegram.org/bot$BOT_TOKEN/sendDocument")

          echo "Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "✅ APK dosyası başarıyla gönderildi"
          else
            echo "❌ APK dosyası gönderilemedi"
            echo "Response Details: $RESPONSE"
          fi

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: "simplexray-*"
          merge-multiple: true

      - name: Upload artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in release/simplexray-*; do
            gh release upload ${{ github.event.release.tag_name }} $i
          done
